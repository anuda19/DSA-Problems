1. Given an array arr and sum s. Find all unique combinations from an array whose sum is equal to s.


function comb(l, sum, S, local, arr) {
    if(sum == S){
        console.log("{");
        for(let i=0; i<local.length; i++){
            if(i != 0)
            console.log(" ");
            console.log(local[i]);
            if(i != local.length -1)
            console.log(", ");
    }
    console.log("}");
    return;
}

for(let i=l; i<arr.length; i++){
    if(sum + arr[i] > S)
    continue;

    if(i>l && arr[i] == arr[i-1])
    continue;
    local.push(arr[i]);
    comb(i + 1, sum + arr[i], S, local, arr);
    local.pop();
  }
}

function comb1(arr, S){
    arr.sort((a, b) => a-b);
    let local = [];
    comb(0, 0, S, local, arr);
}

let arr = [10, 1, 2, 7, 6, 1, 5];
let S = 10;
comb1(arr, S);


===================================================================================================================================================================

2. Find all subsets of an array arr using a backtracking algorithm.
 
function subsets(subset, nums, output, index)
{
    if(index == nums.length){
        subset.push(output);
        return;
    }
    subsets(subset, nums, [...output], index+1);
    output.push(nums[index]);
    subsets(subset, nums, [...output], index + 1);
}
let subset = [];
let input = [];
input.push(1);
input.push(2);
input.push(3);
subsets(subset, input, [], 0);

subset.sort((o1, o2) => {
    let n = Math.min(o1.length, o2.length);
    for(let i=0; i<n; i++){
        if(o1[i] == o2[i]){
            continue;
        }else{
            return o1[i] - o2[i];
        }
    }
    return 1;
});

for(let i=0; i<subset.length; i++){
    for(let j=0; j<subset[i].length; j++){
        console.log(subset[i][j] + " ");
    }
    console.log("<br>");
}

====================================================================================================================================================================

Take an array of size 10. Calculate sum of all array elements using tail recursion.


function arrSum(array, size, sum=0)
{
    if(size==0)
    return sum;
    return arrSum(array, size-1, sum+array[size-1]);
}

var array = [5, 36, 17, 40];
var size = array.length;
console.log(arrSum(array, size));

=====================================================================================================================================================================


Write a function that takes a string and returns a string palindrome.

function pallindrome(str) {
    var len = str.length;
    var mid = Math.floor(len/2);
    for(var i=0; i<mid; i++){
        if(str[i] !== str[len-1-i]){
            return false;
        }
    }
    return true;
}

function isPallindrome(str){
    str = str.replace(/\W/g, '').toLowerCase();
    return (str == str.split('').reverse().join(''));
}

console.log(isPallindrome('level'));
console.log(isPallindrome('levels'));
